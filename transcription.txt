hey what's up guys my name is Paul going to be behind the camera doing the narration that got theirs needs Brandon is going to do an illustration and this is our Fork system cost toriel let's do this what we mean is that Ford makes two identical copies of address spaces one for the child and the other for the parent both properties are an exact copy of each other except for their processes identifiers and a few other my new details which don't really consider after successful called sporkful at the next statement following the port call now we'll go into further details on this in a minute so hang tight guys right now if we wanted to change our A&B two A's go to 7 and basically ate temporarily we would only do the changes to the shop after the variables are changed and use for whatever reason we exit the child resuming in the parent after the wait where it is as if our variables were never changed at all what happens when child is only temporary and look with his job once we exit but it is important to know that for IE when the child terminate without the wait call although the child will still terminate nothing will free up its resources which may lead to memory issues the child process that has terminated but still takes up resources as a result of not being waited on is referred to as a zombie process NACA program is small enough and you're forgetting to wait on maybe a couple children you're not really going to notice any negligible effect but as your program becomes larger you might have nested weights then the resource hugging can become more apparent and it's just it's generally bad practice so don't forget to wake guys alright 